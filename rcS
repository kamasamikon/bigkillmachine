#! /bin/sh

export PATH=/bin:/sbin:/usr/bin:/usr/sbin:.

echo "Mounting virtual filesystems"
mkdir -p /sys /proc /dev /tmp
mount -t proc proc /proc
mount -t usbfs none /proc/bus/usb
mount -t debugfs debugfs /proc/sys/debug
mount -t sysfs sys /sys
mount -t tmpfs -o size=512k,mode=0755 tmpfs /dev
mkdir -p /dev/pts
mount -t devpts devpts /dev/pts
mount -t tmpfs -o mode=01777 tmpfs /tmp

# Start udev daemon
rm -rf /dev/nemotv
rm -fr /dev/null
mknod -m 660 /dev/null c 1 3

if udevd --daemon; then
  echo > /sys/kernel/uevent_helper 2>/dev/null
  echo > /proc/sys/kernel/hotplug 2>/dev/null
  udevadm trigger
  udevadm settle --timeout=3
fi

#echo "Starting mdev"
echo "/sbin/stbhotplug" > /proc/sys/kernel/hotplug
#mdev -s

# when ip=off set in kernel command line, the lo interface is down
# that will make galaxy_banner report some error.
ifconfig lo up

if [ ! -z "$BASH_VERSION" ]; then
	# Recovery from missing /dev/console (works on bash but not ash)
	exec < /dev/console >& /dev/console
fi

# Don't let SCHED_FIFO / SCHED_RR realtime threads get preempted
echo -1 > /proc/sys/kernel/sched_rt_runtime_us

# GPLv3 warning
if [ -e /bin/gdbserver -o -e /bin/gdb ]; then
	echo "* WARNING: THIS STB CONTAINS GPLv3 SOFTWARE"
	echo "* GPLv3 programs must be removed in order to enable security."
	echo "* See: http://www.gnu.org/licenses/gpl-faq.html#Tivoization"
fi
# reversed min free 16M bytes memory for kernel
sysctl -w vm.min_free_kbytes=16384
#turn off memory over commit
#sysctl -w vm.overcommit_memory=2
#sysctl -w vm.overcommit_ratio=100

#Turn on core dump
ulimit -c unlimited
sysctl -w kernel.core_uses_pid=1
sysctl -w fs.suid_dumpable=2
sysctl -w kernel.core_pattern=/var/core-%e-%s-%u-%g-%p-%t

# -small configuration: do not start any other services automatically
if [ ! -e /bin/login ]; then
	[ -f /root/rc.user ] && sh /root/rc.user
	exec /bin/sh
fi
## sharememory will be created under /dev/shm/
mkdir /dev/shm
mount -o mode=1777 -t tmpfs shmfs /dev/shm

# Set up MoCA link, if present
[ -e /dev/bmoca0 ] && mocacfg boot

# Set up WLAN, if present
if [ -e /etc/wl/rtecdc.trx -a -x /bin/bcmdl ]; then
	bcmdl /etc/wl/rtecdc.trx
fi
[ -e /lib/modules/wl.ko ] && insmod /lib/modules/wl.ko
ifconfig eth0 up
#ifconfig eth0 down
#vconfig add eth1 101

#install 8192cu driver for test purpose
#[ -e /usr/lib/modules/8192cu.ko ] && insmod /usr/lib/modules/8192cu.ko

# rootfs on SATA hard disk (but not sda4-less thumbdrive)
if [ -e /dev/root -a "`readlink /dev/root`" = "sda1" -a -e /dev/sda4 ]; then
	mount -o remount,noatime,commit=1 /
	mount -a
	swapon -a
fi

echo "Starting network services"
portmap &
telnetd

###
## ######################################################################
# Nemo: Load klog thing
echo
echo
KLOG_CFG_URL=`grep "klog_cfg_url=.*" -o /proc/cmdline | cut -d ' ' -f1 | awk -F= '{ print $2 }'`
if [ "$KLOG_CFG_URL" != "" ]; then
	echo "Nemo: should get klog configure file from ${KLOG_CFG_URL}"
	wget ${CFG_SRC_URL} -O /tmp/klog.cfg
else
	echo "Nemo: No klog configure from /proc/cmdline, create empty one"
	echo "" > /tmp/klog.cfg
fi
echo
echo
# TODO: How to feed the klog.cfg to klog module?

#if [ -f /root/rc.user ]; then
#	echo "Starting user services"
#	/bin/sh /root/rc.user
#fi

# run the rc.trinity and nexus to install kerneal moduels

# set lib path
export LD_LIBRARY_PATH=./:/usr/local/lib:/usr/lib
export GST_PLUGIN_PATH=/usr/local/lib/gstreamer-0.10
cd /usr/lib/modules/
./load_driver.sh
cd /usr/bin/directfb/1.4/
./rundfb.sh galaxy_banner &
/usr/local/bin/soc_init
#start metalog
#sleep 20

#/usr/bin/galaxy_logger /var/log/nemotv/bcm_driver_log.txt 50 galaxy_audio:0 galaxy_video:0 galaxy_demux:0 galaxy_inject:0 galaxy_linker:0 &

# Environment variables needed by ALSA
export ALSA_CONFIG_PATH=/usr/bin/alsa/alsa.conf
export ALSA_PLUGIN_PATH=/usr/lib
export NEXUS_HANDLE_FILE=/tmp/alsa_handle.txt

cd /root
# initialize and start oprofile 
#opcontrol --init
#opcontrol --no-vmlinux
#opcontrol --separate=lib
#opcontrol --start-daemon
#opcontrol --start

# apply iptables rule
# [ -f /root/iptables_rules.sh ] && [ -f /usr/sbin/iptables ] && [ -f /bin/sh ] && /bin/sh /root/iptables_rules.sh

###
## ######################################################################
# Nemo: PCD output 
echo
echo
PCDOUT=`grep "pcdout=.*" -o /proc/cmdline | cut -d ' ' -f1 | awk -F= '{ print $2 }'`
if [ "$PCDOUT" != "" ]; then
	echo "Nemo: PCD output to file ${PCDOUT}"
else
    PCDOUT=/dev/null
	echo "Nemo: PCDOUT not set, use default path ${PCDOUT}"
fi
echo
echo

if getcap /usr/local/bin/timemgr 2>&1 | grep "Operation not supported"; then
    echo "Call pcd +++++++++++++++++++++"
	LD_PRELOAD=/usr/local/lib/libnemohook.so /usr/sbin/pcd -v -f /etc/rules.pcd &> ${PCDOUT} &
    echo "Call pcd ---------------------"
else
	chmod 644 /dev/shm/fusion.*
	if [ ! -e /home/ntvroot/epg/epg.db ]; then
		chmod 1777 /mnt
		chown configman:configman /etc/configman/configman.xml.local
		chmod -R 770 /home/ntvroot
		chown ntvroot:ntvroot /home/ntvroot
		chown -R ntvroot:ntvroot /home/ntvroot/ssl
		chown -R tss:tss /home/ntvroot/ca
		chown -R aim:aim /home/ntvroot/asm
		chown -R aim:aim /home/ntvroot/aim
		chown -R sia:sia /home/ntvroot/epg
		chown -R otvgst:otvgst /home/ntvroot/ott
		chown -R otvgst:otvgst /home/ntvroot/jobs
		chown -R otvgst:otvgst /home/ntvroot/rbm
		chown -R otvgst:otvgst /home/ntvroot/rtr
		chown -R network:network /home/ntvroot/network
		setcap cap_sys_time=ei /usr/local/bin/timemgr
		setcap cap_sys_admin,cap_sys_rawio=ei /usr/local/bin/otvgst_proc
		setcap cap_kill=ei /usr/local/bin/otvreboot_proc
		setcap cap_kill,cap_net_admin,cap_net_bind_service,cap_net_raw,cap_net_broadcast=ei /usr/local/bin/network
		setcap cap_net_bind_service,cap_net_raw=ei /usr/sbin/dhclient
		setcap cap_net_admin=ei /usr/local/bin/dhclientscript
		setcap cap_net_admin=ei /sbin/iwconfig
		setcap cap_net_raw=ei /usr/local/bin/rbs
		setcap cap_chown=ei /usr/local/bin/downloadmgr
		setcap "cap_dac_override,cap_setpcap,cap_setuid,cap_setgid,cap_kill,cap_sys_chroot,cap_sys_resource=ei cap_dac_override+p" /usr/local/bin/appman
		setcap cap_dac_override=eip /usr/local/bin/aim
        setcap cap_net_admin,cap_net_bind_service,cap_net_raw,cap_net_broadcast=ei /usr/sbin/wpa_supplicant

		echo "#################################################################" >> /etc/rules_release.pcd
		echo "RULE = COMPONENT_STBCONTROLLER" >> /etc/rules_release.pcd
		echo "START_COND = RULE_COMPLETED, COMPONENT_CONFIGMAN, COMPONENT_AIM, COMPONENT_APPMAN" >> /etc/rules_release.pcd
		echo "COMMAND = /usr/local/bin/stbcontroller_s" >> /etc/rules_release.pcd
		echo "SCHED = NICE,0" >> /etc/rules_release.pcd
		echo "DAEMON = YES" >> /etc/rules_release.pcd
		echo "END_COND = PROCESS_READY" >> /etc/rules_release.pcd
		echo "END_COND_TIMEOUT = -1" >> /etc/rules_release.pcd
		echo "FAILURE_ACTION = NONE" >> /etc/rules_release.pcd
		echo "ACTIVE = YES" >> /etc/rules_release.pcd
		echo "USER = root" >> /etc/rules_release.pcd
		echo "GROUP = root" >> /etc/rules_release.pcd
		echo "UMASK = 0" >> /etc/rules_release.pcd
		echo "#################################################################" >> /etc/rules_release.pcd

		echo "app0::6000:6000:app0:/var/tmp:/dev/null" >> /etc/passwd
		echo "app1::6001:6001:app1:/var/tmp:/dev/null" >> /etc/passwd
		echo "app2::6002:6002:app2:/var/tmp:/dev/null" >> /etc/passwd
		echo "app3::6003:6003:app3:/var/tmp:/dev/null" >> /etc/passwd
		echo "app4::6004:6004:app4:/var/tmp:/dev/null" >> /etc/passwd
		echo "app5::6005:6005:app5:/var/tmp:/dev/null" >> /etc/passwd
		echo "app6::6006:6006:app6:/var/tmp:/dev/null" >> /etc/passwd
		echo "app7::6007:6007:app7:/var/tmp:/dev/null" >> /etc/passwd
		echo "app8::6008:6008:app8:/var/tmp:/dev/null" >> /etc/passwd
		echo "app9::6009:6009:app9:/var/tmp:/dev/null" >> /etc/passwd
		echo "app0::6000:app0,appman" >> /etc/group
		echo "app1::6001:app1,appman" >> /etc/group
		echo "app2::6002:app2,appman" >> /etc/group
		echo "app3::6003:app3,appman" >> /etc/group
		echo "app4::6004:app4,appman" >> /etc/group
		echo "app5::6005:app5,appman" >> /etc/group
		echo "app6::6006:app6,appman" >> /etc/group
		echo "app7::6007:app7,appman" >> /etc/group
		echo "app8::6008:app8,appman" >> /etc/group
		echo "app9::6009:app9,appman" >> /etc/group
	fi
	chmod 777 /var	
	chmod 777 /root		
	LD_PRELOAD=/usr/local/lib/libnemohook.so /usr/sbin/pcd -v -f /etc/rules_release.pcd &> ${PCDOUT} &
fi

#/usr/sbin/pcd -f /etc/rules.pcd &
# run configman, aim

#/usr/local/bin/configman &
#/usr/local/bin/aim &

# sleep for 15 seconds and then run appman

#sleep 15
#/usr/local/bin/appman &
