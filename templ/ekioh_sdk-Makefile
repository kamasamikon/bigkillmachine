# If this is not an SSL build, set this. Ports will need to implement
# EKHash.h and EKRandom.h (see OpenSSLHash.cpp and OpenSSLRandom.cpp as an
# example)
# EK_SSL := N

# If the library expects to link with an external copy of OpenSSL, set this
# EK_EXTERNAL_OPENSSL := Y

# Include OIPF DownloadManager support by default, using the stdio based
# sample implementation. Set to N to disable.
# NTV: Disable OIPF
OIPF_DOWNLOAD := N
OIPF = N


# Include OIPF Recording Scheduler support by default, using the stdio
# based sample implementation. Set to N to disable.
OIPF_RECORDER := N

# Guideline bit depth used to store decoded JPEGs.
# Tradeoffs between image quality, performance and memory usage.
# 32: default, highest quality, highest memory usage
# 24: highest quality, intermediate memory. software plotting is slow, so
#     will only actually use 24bpp for hardware accelerated pixmaps,
#     and will fall-back to 32bpp for software pixmaps
# 16: lowest quality, lowest memory.
#
# If you support hardware accelerated pixmap operations, then these will need
# to cope with whatever bit depth you choose here.
EK_JPEG_DECODE_BPP := 32

# Guideline bit depth used to store decoded PNGs.
# 32: default
# 24: will use 24bpp if the PNG has no alpha / transparency info, and the
#     decoded image is to be hardware accelerated. software plotting of 24bpp
#     images is slow, so 32bpp will always be used for non-accelerated images.
#
# If you support hardware accelerated pixmap operations, then these will need
# to cope with whatever bit depth you choose here.
EK_PNG_DECODE_BPP := 32

# Uncomment for builds including WebKit
# WEBKIT := Y
# If WebKit version is 534, uncomment the next line as well.
ifeq ($(WEBKIT_VERSION), 534)
WEBKIT_IMAGE_ENCODE := Y
endif
CF_ALL += -DWEBKIT_VERSION=$(WEBKIT_VERSION)

CROSS_COMPILING ?= Y

ifeq ($(CROSS_COMPILING),N)

CF_ALL += $(shell pkg-config --cflags directfb)
LF_ALL += $(shell pkg-config --libs-only-other directfb)
LL_ALL += $(shell pkg-config --libs-only-l directfb)

else

# NTV: If '--sysroot=' is set, pkg-config and -l should work
CF_ALL += `pkg-config --cflags directfb dbus-1 glib-2.0 utils`
LL_ALL += -ldirectfb -lfusion -ldirect -lpthread -ldbus-glib-1 -ldbus-1 -lglib-2.0 -lsqlite3 -lutils -ldb_open -lotvdbus -lconfigman
 
endif


# Since we have to use CFLAGS for C++ compiler, we want to "suppress"
# C warnings that do not apply to C++. The following line does that:
O_BUILD_CXXFLAGS = $(subst -Wmissing-prototypes,,$(O_BUILD_CFLAGS))

CF_ALL += $(TARGET_CFLAGS) $(O_BUILD_CXXFLAGS)

###
## ######################################################################
# Nemo: Append hilda stuff, Will overwrite O_DEBUG_CFLAGS
HILDA_CFLAGS := -I/home/auv/eoe/auv/hilda/inc
HILDA_LDFLAGS := -L/home/auv/eoe/auv/hilda/build/target/7231 -lhilda
CF_ALL += $(HILDA_CFLAGS)
LL_ALL += $(HILDA_LDFLAGS)

BUILD_TYPE ?= debug
BACKTRACE ?= 0

# for ST backtrace
# also for NDEBUG build the default log level is set to LOG_INFO to allow errors and JS alert() output. 
ifeq ($(BUILD_TYPE), debug)
   CF_ALL += -DEK_LOG_LEVEL=LOG_DEBUG
endif

ifeq ($(BACKTRACE),1)
  CF_ALL += -DBACKTRACE=1
endif


CF_ALL += -DO_LOG_COMPNAME=\"ekioh_bld\" -DO_LOG_LEVEL=O_WARNING

CF_ALL += -DSURF_CACHE=1 -DSURF_CACHE_DEBUG=0 -DUSE_SAWMAN -DHAVE_SIGNAL_H
 

# NTV: Use CXX because CXX includes $(TOOLCHAIN_PREFIX)g++ and --sysroot=. 'sysroot' sets the correct -l and pkg-config --cflags
C++ = $(CXX)

LF_ALL += -L../lib

vpath  %   ../src/Common \
           ../src/Common/OIPF \
           ../src/Common/Unix \
           ../src/DirectFB1.0 \
           ../src/nemotv/comet

INCLUDES += -I../include \
            -I../include/3rdParty \
            -I../include/Controls \
            -I../include/OIPF \
            -I../src/Common \
            -I../src/Common/Unix \
            -I../src/DirectFB1.0 \
            -I../src/nemotv/comet             

EKIOH_SDK_SRCS = EKGImageDecoderPlatform.cpp \
                 EnvVarProxyManager.cpp \
                 JPEGImageDecoder.cpp \
                 JPEGLibDecoder.cpp \
                 EKStdIO.cpp \
                 ProxyManager.cpp \
                 EnvironmentVar.cpp \
                 PNGImageDecoder.cpp \
                 UnixCallbackCollection.cpp \
                 UnixDirectoryEnumeration.cpp \
                 UnixDLLManager.cpp \
                 UnixPlugin.cpp \
                 UnixServerSocket.cpp \
                 UnixSocket.cpp \
                 UnixFDSet.cpp \
                 UnixFileTranslation.cpp \
                 DFBInput.cpp \
                 DFBPlatform.cpp \
                 DFBPixMap.cpp \
                 DFBMain.cpp \
                 CometPlatform.cpp \
                 CometInput.cpp \
                 CometVideoPlayer.cpp \
                 CometControlsMedia.cpp \
                 CometDataCache.cpp

ifeq ($(OIPF_DOWNLOAD),Y)
OIPF := Y
endif
ifeq ($(OIPF_RECORDER),Y)
OIPF := Y
endif
ifeq ($(OIPF),Y)
EKIOH_SDK_SRCS += StdioOIPFBase.cpp
endif
ifeq ($(OIPF_DOWNLOAD),Y)
EKIOH_SDK_SRCS += StdioOIPFDownloadManager.cpp
endif
ifeq ($(OIPF_RECORDER),Y)
EKIOH_SDK_SRCS += StdioOIPFRecording.cpp StdioOIPFRecordingScheduler.cpp
endif
ifeq ($(WEBKIT_IMAGE_ENCODE),Y)
EKIOH_SDK_SRCS += EKGImageEncoderPlatform.cpp PNGImageEncoder.cpp
endif

ifeq ($(EK_EXTERNAL_OPENSSL),Y)
EKIOH_SDK_OBJS += OpenSSLHash.cpp \
                  OpenSSLRandom.cpp
endif

EKIOH_OBJS = $(EKIOH_SDK_SRCS:.cpp=.o)

# NTV: Use $(CFLAGS) for debug or release build
CF_ALL += -fno-rtti -fexceptions -DEKCONTROLS

ifeq ($(WEBKIT),Y)
LL_ALL += -lwebcore -ljavascriptcore
endif
LL_ALL += -lekioh -leklibrary -lm -ldl -lz -lrt

ifeq ($(EK_EXTERNAL_OPENSSL),Y)
LL_ALL += -lcrypto -lssl
endif

CF_ALL += \
 -DEKFEATURE_JPEG_DECODE_BPP=$(EK_JPEG_DECODE_BPP) \
 -DEKFEATURE_PNG_DECODE_BPP=$(EK_PNG_DECODE_BPP)
	

.SUFFIXES:.cpp .o 

.cpp.o:
	@echo $<:
	$(C++) -o $@ -c $(CF_ALL) $(INCLUDES) $<

ekioh: $(EKIOH_OBJS)
	@echo $< : 
	$(C++) -o $@ $(CF_ALL) $(INCLUDES) $(LF_ALL) $(EKIOH_OBJS) $(LL_ALL)

clean:
	@rm -vf $(EKIOH_OBJS)
	@rm -vf ekioh

